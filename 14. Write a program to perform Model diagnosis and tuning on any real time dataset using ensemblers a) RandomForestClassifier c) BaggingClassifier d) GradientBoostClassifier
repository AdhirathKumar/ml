import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline 
df=pd.read_csv('titanic.csv') d
f.head()
df.info()
df.drop(['PassengerId','Name','Ticket','Fare','Cabin'],axis=1,inplace=True) 
df.columns
df1=df.fillna({'Age':df['Age'].mean()}) 
df1.corr()
df1.drop(['Embarked','SibSp','Parch'],axis=1,inplace=True) 
df1.columns
from sklearn.preprocessing import LabelEncoder 
le=LabelEncoder() 
df1['Sex']=le.fit_transform(df1['Sex'])
X=df1[['Pclass','Sex']] 
y=df1['Survived']
from sklearn.model_selection import train_test_split, GridSearchCV 
from sklearn.metrics import accuracy_score
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)


#USING RANDOM FOREST CLASSIFIER

from sklearn.ensemble import RandomForestClassifier 
model_RFC = RandomForestClassifier()
param_grid = {'n_estimators': [20,50, 100, 200],
'max_depth': [None,2, 5, 10],
'min_samples_split': [2, 5, 10]} 
grid_search_RFC = GridSearchCV(model_RFC, param_grid, cv=5) 
grid_search_RFC.fit(X_train, y_train)
best_model = grid_search_RFC.best_estimator_
y_pred = best_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred) 
print('Accuracy:', accuracy)
print("Best paramatres are : ",grid_search_RFC.best_params_)


#USING BAGGING CLASSIFIER

from sklearn.ensemble import BaggingClassifier 
from sklearn.svm import SVC
bagging_clf = BaggingClassifier(estimator=SVC())
param_grid = {'n_estimators': [10, 50, 100],'max_samples': [0.5, 1.0],'max_features':
[0.5, 1.0],
'estimator C': [0.1, 1, 10],'estimator kernel': ['linear', 'poly', 'rbf']}
grid_search_BC = GridSearchCV(bagging_clf, param_grid, cv=5)
grid_search_BC.fit(X_train, y_train) 
best_model = grid_search_BC.best_estimator_
y_pred = best_model.predict(X_test) 
accuracy = accuracy_score(y_test, y_pred) 
print('Accuracy:', accuracy)
print("Best parameters are : ",grid_search_BC.best_params_)


#USING GRADIENT BOOST CLASSIFIER

from sklearn.ensemble import GradientBoostingClassifier gbc = GradientBoostingClassifier()
param_grid = {'n_estimators': [10, 50, 100],'learning_rate': [0.1, 0.01,
0.001],'max_depth': [2, 3, 4],
'min_samples_split': [2, 5, 10],'min_samples_leaf': [1, 2, 4],'max_features': [None, 'sqrt', 'log2']}
grid_search_GBC= GridSearchCV(gbc, param_grid, cv=5) 
grid_search_GBC.fit(X_train, y_train)
best_model = grid_search_GBC.best_estimator_ 
y_pred = best_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred) 
print('Accuracy:', accuracy)
print("Best parameters are : ",grid_search_GBC.best_params_)
