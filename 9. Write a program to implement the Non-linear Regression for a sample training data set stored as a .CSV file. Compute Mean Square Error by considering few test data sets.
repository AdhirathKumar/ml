import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
df=pd.read_csv('housing.csv')
df.head()
df.info()
import seaborn as sns
plt.subplots(figsize=(15, 9))
cor = df.corr()
sns.heatmap(cor, annot=True, linewidths=.5)
plt.show()
X=df['median_income']
y=df['median_house_value']
plt.scatter(X,y)
X=df['median_income']
y=df['median_house_value']
plt.scatter(X,y)
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LassoCV
from sklearn.pipeline import make_pipeline
import warnings
warnings.filterwarnings("ignore")
from sklearn.metrics import mean_squared_error,r2_score
lasso_eps = 0.0001
lasso_nalpha=100
lasso_iter=2000
degree_min = 2
degree_max = 8
rmse=[]
test_score=[]
r2score=[]
X_train, X_test, y_train, y_test = train_test_split(x1,y1,test_size=0.2)
for degree in range(degree_min,degree_max+1):
    model = make_pipeline(PolynomialFeatures(degree, interaction_only=False), LassoCV(eps=lasso_eps,n_alphas=lasso_nalpha,max_iter=lasso_iter,cv=5))
    model.fit(np.array(X_train).reshape(-1,1),y_train)
    test_pred = np.array(model.predict(np.array(X_test).reshape(-1,1)))
    rmse.append(np.sqrt(mean_squared_error(y_test, test_pred)))
    test_score.append(model.score(np.array(X_test).reshape(-1,1),y_test))
    r2score.append(r2_score(y_test,test_pred ))
max(test_score)
max(test_score)
plt.scatter(X_test,y_test,color='red',marker="*")
plt.scatter(X_test,test_pred,color='green',marker=".")
